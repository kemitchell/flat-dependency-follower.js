#!/usr/bin/env node
var ChangesStream = require('changes-stream')
var Follower = require('./')
var heapdump = require('heapdump')
var http = require('http')
var level = require('level')
var pino = require('pino')
var url = require('url')

var changes = new ChangesStream({
  db: 'https://replicate.npmjs.com',
  include_docs: true,
  since: process.argv[2] ? parseInt(process.argv[2]) : 1
})

var LEVEL = process.env.LEVELDB || 'follower.leveldb'
var levelup = level(LEVEL, {valueEncoding: 'json'})

var follower = new Follower(levelup)
var log = pino()

changes
.on('error', logError)
.pipe(follower)
.on('error', logError)
.on('missing', function (info) {
  log.warn(info, 'missing')
})
.on('sequence', function (sequence) {
  if (sequence % 10000 === 0) {
    heapdump.writeSnapshot()
  }
  log.warn({sequence: sequence})
})

function logError (error) {
  log.error(error)
}

var PACKAGE_PATH = new RegExp(
  '^' +
  '/package' +
  '/([^/]+)' + // package name
  '(/([^/]+))?' + // optional package version
  '(/([1-9][0-9]+))?' + // optional sequence
  '$'
)

http.createServer(function (request, response) {
  if (request.method !== 'GET') {
    response.statusCode = 405
    response.end()
    return
  }

  var pathname = url.parse(request.url).pathname
  if (pathname === '/sequence') {
    response.end(JSON.stringify(follower.sequence()))
  } else if (pathname.indexOf('/package/') === 0) {
    var match = PACKAGE_PATH.exec(pathname)
    if (match) {
      var name = decodeURIComponent(match[1])
      if (match[3]) {
        var version = decodeURIComponent(match[3])
        var sequence = (
          Math.floor(Number(match[5])) ||
          follower.sequence()
        )
        follower.query(name, version, sequence, function (error, tree) {
          if (error) {
            internalError()
          } else {
            if (!tree) {
              notFound()
            } else {
              sendJSON({
                package: name,
                version: version,
                sequence: sequence,
                tree: tree
              })
            }
          }
        })
      } else {
        follower.versions(name, function (error, versions) {
          if (error) {
            internalError()
          } else {
            if (versions === null) {
              notFound()
            } else {
              sendJSON(versions)
            }
          }
        })
      }
    } else {
      notFound()
    }
  } else {
    notFound()
  }

  function sendJSON (object) {
    response.statusCode = 200
    response.setHeader('Content-Type', 'application/json')
    response.end(JSON.stringify(object))
  }

  function internalError () {
    response.statusCode = 500
    response.end()
  }

  function notFound () {
    response.statusCode = 404
    response.end()
  }
})
.listen(process.env.PORT || 8080, function () {
  log.info({event: 'listening', port: this.address().port})
})
