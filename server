#!/usr/bin/env node
var ChangesStream = require('changes-stream')
var Follower = require('./')
var http = require('http')
var level = require('level')
var pino = require('pino')
var url = require('url')

var changes = new ChangesStream({
  db: 'https://replicate.npmjs.com',
  include_docs: true,
  since: 1
})

var levelup = level(
  process.env.LEVELDB || 'follower.leveldb',
  {valueEncoding: 'json'}
)

var follower = new Follower(levelup)

var log = pino()

changes
.on('error', logError)
.pipe(follower)
.on('error', logError)
.on('missing', function (info) {
  log.warn(info, 'missing')
})
.on('ignored', function (info) {
  log.warn(info, 'ignored')
})
.on('sequence', function (sequence) {
  log.warn({sequence: sequence})
})

function logError (error) {
  log.error(error)
}

var PACKAGE_PATH = new RegExp(
  '^' +
  '/package/([^/]+)' +
  '/([^/]+)' +
  '(/([1-9][0-9]+))?' +
  '$'
)

http.createServer(function (request, response) {
  if (request.method !== 'GET') {
    response.statusCode = 405
    response.end()
    return
  }
  var parsed = url.parse(request.url)
  var pathname = parsed.pathname
  if (pathname === '/sequence') {
    response.end(JSON.stringify(follower.sequence()))
  } else if (pathname.indexOf('/package/') === 0) {
    var match = PACKAGE_PATH.exec(pathname)
    if (match) {
      var name = decodeURIComponent(match[1])
      var version = decodeURIComponent(match[2])
      var sequence = Math.floor(Number(match[4])) || follower.sequence()
      follower.query(name, version, sequence, function (error, tree) {
        if (error) {
          response.statusCode = 500
          response.end()
        } else {
          response.statusCode = 200
          response.setHeader('Content-Type', 'application/json')
          response.end(JSON.stringify(tree))
        }
      })
    } else {
      response.status = 404
      response.end()
    }
  } else {
    response.statusCode = 404
    response.end()
  }
})
.listen(process.env.PORT || 8080, function () {
  log.info({event: 'listening', port: this.address().port})
})
